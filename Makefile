##
## EPITECH PROJECT, 2023
## Makefile
## File description:
## Build my_sokoban
##

CC = gcc
CFLAGS = -Wall -Wextra -I. -I./src/ -L . -lmy -MMD -MP
NCURSESFLAGS = -lncurses
LDFLAGS = -L . -lmy $(NCURSESFLAGS)
RM = rm -f

MAIN_SRC = ./src/my_sokoban.c
SRC = ./src/player.c \
	./src/position.c \
	./src/box.c \
	./src/storage.c \
	./src/utils.c \
	./src/game.c
SRC_TEST = ./tests/test_sokoban.c
OBJS = $(MAIN_SRC:.c=.o) $(SRC:.c=.o)
TEST_OBJS = $(SRC:.c=.o) $(SRC_TEST:.c=.o)

LIB_PATH = ./lib/my

NAME_TEST = unit_tests
NAME = my_sokoban

RUN_ARGS = ./example_files/map

.PHONY: all build_lib clean_lib fclean_lib clean fclean re tests_run \
	valgrind tests_clean

all: $(NAME)

$(NAME): build_lib $(OBJS)
	$(CC) $(OBJS) -o $(NAME) $(LDFLAGS)

$(NAME_TEST): build_lib $(TEST_OBJS)
	$(CC) $(TEST_OBJS) -o $(NAME_TEST) $(LDFLAGS) --coverage -lcriterion

# Rule for building object files
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

build_lib:
	make -C $(LIB_PATH)

clean_lib:
	make clean -C $(LIB_PATH)

fclean_lib:
	make fclean -C $(LIB_PATH)

clean: clean_lib
	find . -type f \( -name '*.o' -o -name '*.d' \) -delete

fclean: clean fclean_lib tests_clean
	$(RM) $(NAME)

re: fclean all

tests_run: $(NAME_TEST)
	./$(NAME_TEST)

tests_clean:
	$(RM) $(NAME_TEST)
	$(RM) *.gcno *.gcda

run: $(NAME)
	./$(NAME) $(RUN_ARGS)

# Include the dependency files generated by GCC
-include $(OBJS:.o=.d) $(TEST_OBJS:.o=.d)
